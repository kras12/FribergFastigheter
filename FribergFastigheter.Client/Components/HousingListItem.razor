@using FribergFastigheter.Client.HelperClasses
<!-- Author: Jimmie -->
<!-- Co Authors: -->
@{
    string linkUrl = !string.IsNullOrEmpty(Housing.Url) ? Housing.Url : "";
    string linkClass = !string.IsNullOrEmpty(Housing.Url) ? "" : "inactive-link";
    string elementId = ElementId != null ? ElementId : Guid.NewGuid().ToString();
}
<div id="@elementId" class="card">
    <a href="@linkUrl" class="@linkClass">
        <div class="card-header housing-result-header d-flex flex-row justify-content-between">
            <div>@Housing.Broker.FullName</div>
            <div>@Housing.Category.CategoryName</div>
            <div class="d-flex flex-row justify-content-end">
                @if (Housing.Broker.BrokerFirm.Logotype != null)
                {
                    <img class="broker-firm-logotype" src="@Housing.Broker.BrokerFirm.Logotype.Url" />
                }
            </div>
        </div>
    </a>
    @if (_isInEditMode)
    {
        <EditHousing Housing="Housing" OnHousingEdited="OnHousingEditedEventHandler" OnHousingEditCancelled="OnCancelEditingEventHandler"></EditHousing>
    }
    else
    {
        <a id="@elementId" href="@linkUrl" class="@linkClass">
            <div class="tiled-image-gallery tiled-image-gallery__image-size_medium">
                @for (int i = 0; i < Housing.Images.Count && i < 3; i++)
                {
                    string className = "";

                    if (i == 1)
                    {
                        className = "d-none d-md-none d-lg-block d-xl-block";
                    }
                    else if (i > 1)
                    {
                        className = "d-none d-xxl-block";
                    }

                    <img class="housing-image @(className)" src="@Housing.Images[i].Url" />
                }
            </div>
            <div class="card-header full-width">
                <div class="card-title display-4 text-center">@(StringFormatHelper.FormatPrice(Housing.Price))</div>
                <div class="card-subtitle display-6 text-center text-muted mb-2">@Housing.Address</div>
                <div class="card-subtitle display-6 text-center text-muted mb-2">@Housing.Municipality.MunicipalityName</div>
                <div class="d-flex flex-row justify-content-center gap-4 flex-wrap full-width fs-5">
                    <span>Boyta: @StringFormatHelper.FormatMeterSquared(Housing.LivingArea)</span>
                    @if (Housing.RoomCount != null)
                    {
                        <span>Antal rum: @Housing.RoomCount</span>
                    }
                    @if (Housing.AncillaryArea != null)
                    {
                        <span>Övrig yta: @StringFormatHelper.FormatMeterSquared(Housing.AncillaryArea.Value)</span>
                    }
                    @if (Housing.LandArea != null)
                    {
                        <span>Landyta: @StringFormatHelper.FormatMeterSquared(Housing.LandArea.Value)</span>
                    }
                    @if (Housing.BuildYear != null)
                    {
                        <span>Byggår: @Housing.BuildYear</span>
                    }
                    @if (Housing.MonthlyFee != null)
                    {
                        <span>Månadskostnad: @StringFormatHelper.FormatPrice(@Housing.MonthlyFee.Value)</span>
                    }
                    @if (Housing.YearlyRunningCost != null)
                    {
                        <span>Årlig kostnad: @StringFormatHelper.FormatPrice(@Housing.YearlyRunningCost.Value)</span>
                    }
                </div>
            </div>
            <div class="card-body">
                <p class="card-text">
                    @if (TruncateLongDescriptions && !_overrideDescriptionTruncation)
                    {
                        @StringFormatHelper.TruncateLongTexts(Housing.Description, 300)
                    }
                    else
                    {
                        var paragraphs = Housing.Description.Split(Environment.NewLine, StringSplitOptions.RemoveEmptyEntries);

                        foreach (var paragraph in paragraphs)
                        {
                            <p class="card-text">@($"{paragraph}{Environment.NewLine}")</p>
                        }
                    }                    
                </p>
            </div>        
        </a>
        <div class="card-footer d-flex flex-row justify-content-center gap-3">
            @if (TruncateLongDescriptions && _overrideDescriptionTruncation)
            {
                <button type="button" class="btn btn-info" @onclick="(() => OverrideDescriptionTruncation(false))">Kort beskrivning</button>
            }
            else if (TruncateLongDescriptions)
            {
                <button type="button" class="btn btn-info" @onclick="(() => OverrideDescriptionTruncation(true))">Lång beskrivning</button>
            }            
            <button type="button" class="btn btn-primary" @onclick="@(() => OnEditHousingButtonClickedEventHandler())">Redigera</button>
            <DeleteHousing Housing="Housing" BrokerFirmId="Housing.Broker.BrokerFirm.BrokerFirmId" OnHousingDeleted="OnHousingDeletedEventHandler"></DeleteHousing>
        </div>
    }
</div>
